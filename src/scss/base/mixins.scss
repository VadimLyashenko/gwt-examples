@use 'sass:math';

// Font face
@mixin font($font_name, $file_name, $weight, $style) {
    @font-face {
        font-family: $font_name;
        font-style: #{$style};
        font-weight: #{$weight};
        font-display: swap;
        src: url('../fonts/#{$file_name}.woff2') format('woff2'), url('../fonts/#{$file_name}.woff') format('woff');
    }
}

// Percent
@function percent($px, $from) {
    $result: math.div($px, $from) * 100%;

    @return $result;
}

// REM
@function rem($px) {
    $result: math.div($px, 16) + rem;

    @return $result;
}

// EM
@function em($px, $current: 16) {
    $result: math.div($px, $current) + em;

    @return $result;
}

// Currency
@mixin currency($sym) {
    &::after {
        content: '#{$sym}';
    }
}

// Grids
//@mixin gridCards($type: fit, $min: 280px, $max: 1fr, $gap: 30px) {
//    display: grid;
//    gap: $gap;
//    grid-template-columns: repeat(auto-#{$type}, minmax($min, $max));
//}

// Adaptive value (clamp)
@mixin adaptiveValue($property, $startSize, $minSize, $widthFrom: $containerWidth, $widthTo: $minWidth, $keepSize: 0) {
    @if ($startSize==0) {
        $startSize: 0.000001;
    }

    @if ($minSize==0) {
        $minSize: 0.000001;
    }

    // For calc();
    $addSize: math.div($startSize - $minSize, 16);

    @if ($widthFrom == $containerWidth and $maxWidthContainer == 0) {
        $widthFrom: $maxWidth;
    }

    // Break points on EM`s
    $widthFromMedia: em($widthFrom);
    $widthToMedia: em($widthTo);

    // Floating value
    // https://css-tricks.com/linearly-scale-font-size-with-css-clamp-based-on-the-viewport/
    $slope: math.div(($startSize - $minSize), ($widthFrom - $widthTo));
    $yIntersection: -$widthTo * $slope + $minSize;

    @if ($yIntersection==0) {
        $yIntersection: 0.000001;
    }
    $flyValue: #{rem($yIntersection)}' + ' #{$slope * 100}vw;

    // Get property value
    $propertyValue: #{'clamp(' rem($minSize) ',' $flyValue ',' rem($startSize) ')'};

    // If negative
    @if ($minSize > $startSize) {
        $propertyValue: #{'clamp(' rem($startSize) ',' $flyValue ',' rem($minSize) ')'};
    }

    // If clamp() supported;
    @supports (#{$property}: $propertyValue) {
        #{$property}: $propertyValue;
    }

    // If clamp() not supported;;
    @supports not (#{$property}: $propertyValue) {
        #{$property}: calc(#{rem($minSize)} + #{$addSize} * (100vw - #{rem($widthTo)}) / #{math.div($widthFrom, 16) - math.div($widthTo, 16)});
    }

    // Default value
    @if $widthFrom != $containerWidth and $widthFrom != $maxWidth and $keepSize != 1 and $keepSize != 2 {
        @media (min-width: $widthFromMedia) {
            #{$property}: inherit;
        }
    }

    @if $widthTo != $minWidth and $keepSize != 1 and $keepSize != 3 {
        @media (max-width: $widthToMedia) {
            #{$property}: inherit;
        }
    }
}
